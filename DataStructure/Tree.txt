#include <iostream>
#include<queue>
using namespace std;
typedef struct BiTree {
	int data;
	struct BiTree* lchild;
	struct BiTree* rchild;
}Node;
int mapIndex[256];
//中序映射，必须有，很重要，不然无法计算子树节点个数
void mapToIndex(int in[], int n) {
	for (int i = 0; i < n; i++)
		mapIndex[in[i]] = i; // map inOrder to index
}
//以两种序列建树
Node* buildTree(int pre[], int n, int offset) {
	if (n == 0)
		return NULL;
	Node* root = (Node*)malloc(sizeof(Node));
	root->data = pre[0];
	int i = mapIndex[root->data] - offset;
	root->lchild = buildTree(pre + 1, i, offset);
	root->rchild = buildTree(pre + i + 1, n - i - 1, offset + i + 1);
	return root;
}
//先序遍历
void preOrder(Node* T) {
	if (T != NULL) {
		cout << T->data;
		preOrder(T->lchild);
		preOrder(T->rchild);
	}
}
//中序遍历
void inOrder(Node* T) {
	if (T != NULL) {
		inOrder(T->lchild);
		cout << T->data;
		inOrder(T->rchild);
	}
}
//后序遍历
void postOrder(Node* T) {
	if (T != NULL) {
		postOrder(T->lchild);
		postOrder(T->rchild);
		cout << T->data;
	}
}
//层序遍历
void levelOrder(Node* T) {
	queue<Node*> q; //注意这里要定义成指针类型，注意泛型的应用
	if (T) { //根节点不为空，则入队
		q.push(T);
	}
	while (!q.empty()) { //若队列不为空，输出
		cout << q.front()->data;
		if (q.front()->lchild)  //其左孩子入队
			q.push(q.front()->lchild);
		if (q.front()->rchild) //其右孩子入队
			q.push(q.front()->rchild);
		q.pop(); //弹出，直接从队列中删除了(void类型)  必须要执行此操作，不然就会陷入只输出根节点的死循环
		        //注意与front()区别，它始终返回队列中第一个节点，是有类型的！
	}
}
/* 层序遍历的非指针版本，感觉应该没啥错，但是执行的时候有bug，以后待议
void levelOrder(Node* T) {
	queue<int> q;
	if (T) {
		q.push(T->data);
	}
	while (!q.empty()) {
		cout << q.front();
		if (T->lchild)
			q.push(T->lchild->data);
		if (T->rchild)
			q.push(T->rchild->data);
		q.pop();
	}
}
*/
//一种序列建树(先序)
Node* createPreTree() {
	int val;
	Node* root = (Node*)malloc(sizeof(Node));
	cin >> val;
	if (val == 0)
		root = NULL;
	else {
		root->data = val;
		root->lchild = createPreTree();
		root->rchild = createPreTree();
	}
	return root;
}
//求节点个数
int nodeNum(Node* T) {
	if (T == NULL)
		return 0;
	else {
		return 1 + nodeNum(T->lchild) + nodeNum(T->rchild);
	}
}
//求二叉树深度
int depthTree(Node* T) {
	if (T == NULL)
		return 0;
	else {
		return depthTree(T->lchild) > depthTree(T->rchild) ? depthTree(T->lchild) + 1 : depthTree(T->rchild) + 1;
	}
}
//求叶子节点
int leafNum(Node* T) {
	if (!T)
		return 0;
	else if (T->lchild == NULL && T->rchild == NULL)
		return 1;
	else
		return leafNum(T->lchild) + leafNum(T->rchild);
}
//求最近公共祖先(这里的p和q是节点的值，若要改成指针，则函数里面的代码也对应修改即可)
Node* LCA(Node* T, int p, int q) {
	if (!T)
		return NULL;
	if (T->data == p || T->data == q)//此时LCA为指定的某个节点本身
		return T;
	Node* left = LCA(T->lchild, p, q);
	Node* right = LCA(T->rchild, p, q);
	if (left && right)  //注意是从根节点开始遍历的，如果根的左右子树都存在，则LCA一定在根节点，理解此句话含义
		return T;
	return left == NULL ? right : left;
}
//寻找某个节点的双亲节点(直系的)
Node* searchParent(Node* T, int m) {//在T中寻找m节点的parent
	if (!T)
		return NULL;
	if (T->lchild && T->lchild->data == m)
		return T->lchild;
	if (T->rchild && T->rchild->data == m)
		return T->rchild;
	if (T->data == m)//默认根节点的双亲是它本身
		return T;
	searchParent(T->lchild, m);
	searchParent(T->rchild, m);
}
int main()
{
	int pre[] = { 1,2,4,7,3,5,6,8 };
	int in[] = { 4,7,2,1,5,3,6,8 };
	mapToIndex(in, sizeof(in) / sizeof(int));
	Node* root = buildTree(pre, sizeof(in) / sizeof(int), 0);//起始节点、节点个数、偏移量

	//用一种序列也可以建树，但是必须借助特殊结束符才行，即有n个节点的二叉树，必须有额外的n+1个空间域
	//即假如树是1234，则输入序列必须为123400000，n+1个0作为特殊结束符，一个都不能少，否则无法正常结束.
	//Node* root = createPreTree();
	preOrder(root);
	cout << endl;
	inOrder(root);
	cout << endl;
	postOrder(root);
	cout << endl;
	levelOrder(root);
	cout << endl;
	cout << nodeNum(root) << endl;
	cout << depthTree(root) << endl;
	cout << leafNum(root) << endl;
	Node* T = LCA(root, 7, 2);
	cout << T->data;
	Node* t = searchParent(root, 7);
	cout << t->data;
	return 0;
}



BST树的一些操作:建树、插入、查找(与插入类似，只不过判断一下关键字是否相等再递归调用即可)、删除(重点了解思想及各种情况)

#include<iostream>
using namespace std;
struct BST {
	int data;
	struct BST* lchild;
	struct BST* rchild;
};
typedef struct BST* Node;
Node T;
int insert_BST(Node T,int k) {
	if (T == NULL) {
		Node T = (Node)malloc(sizeof(BST)); //申请节点空间
		T->data = k;
		T->lchild = NULL;
		T->rchild = NULL;
		return 1;
	}
	else if (T->data == k)
		return 0;
	else if (T->data > k)
		return insert_BST(T->lchild, k);
	else if(T->data < k)
		return insert_BST(T->rchild, k);
}
Node create_BST(int arr[], int n) {
	//Node T = (Node)malloc(sizeof(BST));
	Node T = NULL;
	for (int i = 0; i < n; i++)
		insert_BST(T,arr[i]);
	return T;
}
void delete_BST_key1(Node p, Node lc) {

}
//若要删除某个关键字，首先定位到这个关键字(递归查找的过程)，然后再调用delete_BST_key函数即可
void delete_BST_key(Node p) {
	//删除关键字为k的节点p
	Node tmp;
	if (p->lchild == NULL) {
		tmp = p;
		p = p->rchild;
		free(p);
	}
	else if (p->rchild == NULL) {
		tmp = p;
		p = p->lchild;
		free(p);
	}
	else delete_BST_key1(p, p->lchild); //p既有左孩子又有右孩子的情况,可以用左子树的最大关键字来代替p,也可以用右子树的最小关键字来代替p
}
void preOrder(Node T) {
	if (T != NULL) {
		cout << T->data;
		preOrder(T->lchild);
		preOrder(T->rchild);
	}
}
int main() {
	//const int M = 100; //数据大小
	int arr[9] = { 5,2,1,6,7,4,8,3,9 }, n = 9;
	T = create_BST(arr, n);
	preOrder(T);
	return 0;
}


//判断是否是子树结构
递归解决，注意边界条件
bool IsSubTree(BiTree A, BiTree B) {
	if (!B) {
		return true;
	}
	if (!A) {
		return false;
	}
	if (A->data == B->data) {
		return IsSubTree(A->lchild, B->lchild) && IsSubTree(A->rchild, B->rchild);
	}
}
bool HasSubTree(BiTree A, BiTree B) {
	if (!A || !B) {
		return false;
	}
	return IsSubTree(A, B) || HasSubTree(A->rchild, B) || HasSubTree(A->rchild, B);
}