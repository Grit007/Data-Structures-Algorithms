//图深搜和广搜
#include<iostream>
#include<queue>
using namespace std;
#define MAXVEX 100
bool flag[MAXVEX] = { 0 };
struct MGraph {
	int arc[MAXVEX][MAXVEX]; //邻接矩阵
	int numVertexes, numEdges;//顶点数和边数
	int verx[MAXVEX];
};
MGraph* createGraph() {
	int i, j, k, w;
	MGraph* G = (MGraph*)malloc(sizeof(MGraph));
	cout << "输入顶点数和边数\n";	
	cin >> G->numVertexes>>G->numEdges;
	/*cout << "请输入各顶点值\n";
	for (i = 0; i < G->numVertexes; i++)
		cin >> G->verx[i];*/
	memset(G->arc, 0, sizeof(int));//简洁的邻接矩阵初始化方法,与上面等价
	for (k = 0; k < G->numEdges; k++) {
		cout << "请输入边的下标i,j以及对应的权值w：";
		cin >> i >> j >> w;
		G->arc[i][j] = w;
		G->arc[j][i] = G->arc[i][j]; //因为是无向图，矩阵对称
	}
	return G;
}
void DFS(MGraph* G,int i) { // i是起始的遍历节点,默认从0开始
	flag[i] = true;
	cout << i; //打印访问过的顶点
	for (int j = 0; j < G->numVertexes; j++) {
		if (G->arc[i][j] && !flag[j])
			DFS(G, j);
	}
}
//深搜，递归解决，类似树的先序遍历
void DFSTraverse(MGraph* G) {
	int i;
	for (i = 0; i < G->numVertexes; i++) //默认从第一个顶点开始遍历
	if (!flag[i])
		DFS(G, i);
}
//广搜，队列解决，类似树的层序遍历
void BFS(MGraph* G) {
	int i,j;
	queue<int>q;
	bool visited[MAXVEX] = { 0 };
	for (i = 0; i < G->numVertexes; i++) {
	    if (!visited[i]) {
		    visited[i] = true;
		    cout << i;
		    q.push(i);
		    while (!q.empty()) {
			//int temp = q.front();
			    q.pop();
			    for (j = 0; j < G->numVertexes; j++) {
				    if (G->arc[i][j] && !visited[j]) {
						visited[j] = true;
						cout << j;
						q.push(j);
					}
				}
			}
		}
	}
}
int main() {
	MGraph* G = createGraph();
	cout << G->numVertexes << endl;
	//cout << "遍历的起始节点：\n";
	//int v;
	//cin >> v;

	DFSTraverse(G);
	cout << endl;
	BFS(G);
	return 0;
}


//最小生成树prim
#include<iostream>
int edge[256][256] = { 0 }; //进行初始化
int visited[256] = { 0 };
int dis[256] = { 0 };
int num = 0;
using namespace std;
int prim(int s) {
	int pos, min;//pos记录每次确定下来要加入集合book的那个节点，min表示当前这轮确定的最短路径
	int MST = 0;
	visited[s] = 1;//将顶点s放入集合(表示已经访问)
	pos = s;
	for (int i = 1; i <= num; i++)
		dis[i] = s = edge[pos][i];//dis[]中记录的是顶点到其他点的初始化距离
	//执行n-1次(因为还剩下n-1个节点，确保每个节点都访问到),也可以理解为n个顶点要n-1条边相连，所以执行n-1次
	for (int i = 2; i <= num; i++) {
		min = INFINITY;
		for (int j = 1; j <= num; j++) {
			if (!visited[j] && dis[j] < min) {
				min = dis[j];
				pos = j;
			}
		}
		visited[pos] = 1;//已找到一条路径，将该点标志为已访问
		MST += min;//加上这条最短路径
		for (int j = 1; j <= num; j++) { //每找到一条路径后就尝试更新dis
			if (!visited[j] && edge[pos][j] < dis[j])//更新条件：j点未访问，并且加入新点后已访问集合到j的距离变小了
				dis[j] = edge[pos][j];
		}
	}
return MST;
}
int main() {
	int num, e;
	int i, j, w;
	cout << "请输入图顶点个数,下标从1开始\n";
	cin >> num;
	cout << "请输入边的个数\n";
	cin >> e;
	for (int k = 1; k <= e; k++) { //输入邻接矩阵
		cout << "请输入对应边的坐标i,j以及权重w\n";
		cin >> i >> j >> w;
		edge[i][j] = w;
		edge[j][i] = edge[i][j];
	}
	cout << prim(1);
	return 0;
}

// kruskal中核心的并查集相关算法
int node[i]; //每个节点
//初始化n个节点 node其实就是parent数组
void Init(int n) {
	for (int i = 0; i < n; i++) {
		node[i] = i;
	}
}
//查找当前元素所在树的根节点(代表元素)
int find(int x) {
	if (x == node[x])
		return x;
	return find(node[x]);
}
//合并元素x， y所处的集合
void Unite(int x, int y) {
	//查找到x，y的根节点
	x = find(x);
	y = find(y);
	if (x == y)
		return;
	//将x的根节点与y的根节点相连
	node[x] = y;
}
//判断x，y是属于同一个集合
bool same(int x, int y) {
	return find(x) == find(y);
}

//最短路径算法(Dijstra和Floyd)前者跟prim算法思想很类似，是贪心;后者是DP算法，经典的三重循环(中间点、起点、终点)明白这两个算法的思想即可
