#pragma once
#ifndef STACK_H_
#define STACK_H_
typedef unsigned long Item;
//类声明与函数原型
class Stack {
private:
	enum{MAX = 10};
	Item items[MAX];
	int top;
public:
	Stack();
	bool isempty() const;
	bool isfull() const;
	bool push(const Item& item);
	bool pop(Item& item);
};
#endif // !STACK_H_



//类方法实现
#include "stack.h"
Stack::Stack() {
	top = 0;
}
bool Stack::isempty() const {
	return top == 0;
}
bool Stack::isfull()const {
	return top == MAX;
}
bool Stack::push(const Item& item) {
	if (top < MAX) {
		items[top++] = item;
		return true;
	}
	else {
		return false;
	}
}
bool Stack::pop(Item& item) {
	if (top > 0) {
		item = items[top--];
		return true;
	}
	else {
		return false;
	}
}


//类方法测试
#include<iostream>
#include<cctype>
#include"stack.h"  //引入头文件支持  双引号表示自己定义的  尖括号表示标准库里的
using namespace std;
int main() {
	Stack st;
	char ch;
	unsigned long po;
	while (cin >> ch && toupper(ch) != 'Q') {
		while (cin.get() != '\n') 
			continue;
		if (!isalpha(ch)) {
			cout << "please enter a alpha\n";
			continue;
		}
		switch (ch) {
		case 'A':
		case 'a':
			cout << "enter a po number to add:";
			cin >> po;
			if (st.isfull()) {
				cout << "stach already full\n";
			}
			else {
				st.push(po);
			}
			break;
		case 'P':
		case'p':
			if (st.isempty()) {
				cout << "stack already empty\n";
			}
			else {
				st.pop(po);
			}
			break;

		}
		cout << "please enter A to add a purchase order\n"
			<< "p to process or Q to quit\n";
	}
	cout << "Bye\n";
	return 0;
}
